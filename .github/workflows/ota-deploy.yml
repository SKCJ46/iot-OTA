name: Build & Deploy ESP32 OTA (secrets/vars/inputs fallback)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      vm_host:
        description: "VM host (e.g. 20.2.91.100)"
        required: false
        type: string
      vm_user:
        description: "VM username"
        required: false
        type: string
      ssh_key:
        description: "PEM private key (BEGIN..END)"
        required: false
        type: string
      ota_url:
        description: "Firmware URL (served by VM)"
        required: false
        type: string

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Show repo tree (debug)
      run: ls -R

    - name: Install Arduino CLI
      uses: arduino/setup-arduino-cli@v2

    - name: Install ESP32 core
      run: |
        arduino-cli config init
        arduino-cli core update-index
        arduino-cli core install esp32:esp32@3.0.7

    - name: Install libraries
      run: |
        arduino-cli lib install "WiFiManager" "ArduinoJson" "ModbusMaster" "LoRa"

    # โหลดค่าตามลำดับ: Secrets -> Variables -> Inputs (Run workflow)
    - name: Load connection settings (Secrets/Vars/Inputs)
      id: cfg
      shell: bash
      run: |
        VM_HOST="${{ secrets.VM_HOST }}"
        [ -z "$VM_HOST" ] && VM_HOST="${{ vars.VM_HOST }}"
        [ -z "$VM_HOST" ] && VM_HOST="${{ github.event.inputs.vm_host }}"

        VM_USER="${{ secrets.VM_USER }}"
        [ -z "$VM_USER" ] && VM_USER="${{ vars.VM_USER }}"
        [ -z "$VM_USER" ] && VM_USER="${{ github.event.inputs.vm_user }}"

        SSH_KEY="${{ secrets.SSH_KEY }}"
        [ -z "$SSH_KEY" ] && SSH_KEY="${{ vars.SSH_KEY }}"
        [ -z "$SSH_KEY" ] && SSH_KEY="${{ github.event.inputs.ssh_key }}"

        OTA_URL="${{ secrets.OTA_URL }}"
        [ -z "$OTA_URL" ] && OTA_URL="${{ vars.OTA_URL }}"
        [ -z "$OTA_URL" ] && OTA_URL="${{ github.event.inputs.ota_url }}"

        {
          echo "VM_HOST=$VM_HOST"
          echo "VM_USER=$VM_USER"
          echo "OTA_URL=$OTA_URL"
        } >> "$GITHUB_ENV"

        if [ -n "$SSH_KEY" ]; then
          umask 077
          printf '%s\n' "$SSH_KEY" > key.pem
          chmod 600 key.pem
          echo "KEY_PATH=$PWD/key.pem" >> "$GITHUB_ENV"
        fi

        [ -n "$VM_HOST" ] || (echo "VM_HOST empty"; exit 1)
        [ -n "$VM_USER" ] || (echo "VM_USER empty"; exit 1)
        [ -n "$SSH_KEY" ] || (echo "SSH_KEY empty"; exit 1)
        [ -n "$OTA_URL" ] || (echo "OTA_URL empty"; exit 1)

    - name: Extract firmware version
      id: ver
      run: |
        FILE="Sender/Sender.ino"
        [ ! -f "$FILE" ] && echo "File not found: $FILE" && ls -R && exit 1
        VER=$(grep -oP '#define\s+CURRENT_VERSION\s+"[^"]+"' "$FILE" | sed -E 's/.*"([^"]+)".*/\1/')
        [ -z "$VER" ] && echo "Version not found in $FILE" && exit 1
        echo "version=$VER" >> "$GITHUB_OUTPUT"
        echo "Detected version: $VER"

    - name: Prepare sketch folder
      run: |
        rm -rf sketch
        mkdir -p sketch
        cp Sender/Sender.ino sketch/sketch.ino

    - name: Compile firmware
      run: |
        set -x
        arduino-cli compile \
          --fqbn esp32:esp32:esp32 \
          sketch \
          --output-dir build \
          --export-binaries

    - name: Prepare artifacts (firmware.bin & version.json)
      run: |
        BIN=$(find build -type f -name "*.bin" | head -n1)
        [ -z "$BIN" ] && echo "No .bin produced!" && exit 1
        cp "$BIN" firmware.bin
        cat > version.json <<EOF
        {
          "version": "${{ steps.ver.outputs.version }}",
          "url": "${{ env.OTA_URL }}"
        }
        EOF
        echo "version.json:" && cat version.json

    - name: Test SSH connectivity
      run: |
        ssh -i "$KEY_PATH" -o StrictHostKeyChecking=no "${VM_USER}@${{ env.VM_HOST }}" "echo connected OK"

    - name: Upload to VM via SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host:     ${{ env.VM_HOST }}
        username: ${{ env.VM_USER }}
        key_path: ${{ env.KEY_PATH }}
        source: |
          firmware.bin
          version.json
        target: /var/www/html/
