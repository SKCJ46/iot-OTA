name: Build & Deploy ESP32 OTA (stable)

on:
  push:
    branches: [ main ]        # รันอัตโนมัติเมื่อ push เข้า main
  workflow_dispatch:          # หรือกด Run เองได้จาก Actions

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1) ดึงซอร์ส
    - name: Checkout
      uses: actions/checkout@v4

    - name: Show repo tree (debug)
      run: ls -R

    # 2) ติดตั้ง arduino-cli + ESP32 core + ไลบรารีที่ใช้
    - name: Install Arduino CLI
      uses: arduino/setup-arduino-cli@v2

    - name: Install ESP32 core
      run: |
        arduino-cli config init
        arduino-cli core update-index
        arduino-cli core install esp32:esp32@3.0.7

    - name: Install libraries
      run: |
        arduino-cli lib install "WiFiManager" "ArduinoJson" "ModbusMaster" "LoRa"

    # 3) อ่านเวอร์ชันจาก Sender/Sender.ino
    - name: Extract firmware version
      id: ver
      run: |
        FILE="Sender/Sender.ino"
        [ ! -f "$FILE" ] && echo "File not found: $FILE" && ls -R && exit 1
        VER=$(grep -oP '#define\s+CURRENT_VERSION\s+"[^"]+"' "$FILE" | sed -E 's/.*"([^"]+)".*/\1/')
        [ -z "$VER" ] && echo "Version not found in $FILE" && exit 1
        echo "version=$VER" >> $GITHUB_OUTPUT
        echo "Detected version: $VER"

    # 4) เตรียมสเก็ตช์ให้ชื่อไฟล์หลักตรงกับโฟลเดอร์ (กัน error main file missing)
    - name: Prepare sketch folder
      run: |
        rm -rf sketch
        mkdir -p sketch
        cp Sender/Sender.ino sketch/sketch.ino

    # 5) คอมไพล์
    - name: Compile firmware
      run: |
        set -x
        arduino-cli compile \
          --fqbn esp32:esp32:esp32 \
          sketch \
          --output-dir build \
          --export-binaries

    # 6) รวมไฟล์ผลลัพธ์
    - name: Prepare artifacts (firmware.bin & version.json)
      run: |
        BIN=$(find build -type f -name "*.bin" | head -n1)
        [ -z "$BIN" ] && echo "No .bin produced!" && exit 1
        cp "$BIN" firmware.bin
        cat > version.json <<EOF
        {
          "version": "${{ steps.ver.outputs.version }}",
          "url": "${{ secrets.OTA_URL }}"
        }
        EOF
        echo "version.json:" && cat version.json

    # 7) ตรวจ Secrets (ไม่โชว์ค่า แค่เช็คว่ามี)
    - name: Sanity check secrets
      run: |
        [ -n "${{ secrets.VM_HOST }}" ] && echo "VM_HOST OK" || (echo "VM_HOST empty"; exit 1)
        [ -n "${{ secrets.VM_USER }}" ] && echo "VM_USER OK" || (echo "VM_USER empty"; exit 1)
        [ -n "${{ secrets.SSH_KEY }}" ] && echo "SSH_KEY OK" || (echo "SSH_KEY empty"; exit 1)
        [ -n "${{ secrets.OTA_URL }}" ] && echo "OTA_URL OK" || (echo "OTA_URL empty"; exit 1)

    # 8) เขียน SSH key จาก Secret ลงไฟล์ key.pem (รองรับหลายบรรทัด)
    - name: Write SSH private key
      run: |
        umask 077
        cat > key.pem <<'EOF'
        ${{ secrets.SSH_KEY }}
        EOF
        chmod 600 key.pem

    # 9) ทดสอบ SSH ก่อนอัปโหลด
    - name: Test SSH connectivity
      run: |
        ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "echo connected OK"

    # 10) อัปโหลดไฟล์ไป VM
    - name: Upload to VM via SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host:     ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key_path: key.pem
        source: |
          firmware.bin
          version.json
        target: /var/www/html/
