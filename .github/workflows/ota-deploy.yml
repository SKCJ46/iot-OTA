name: Build & Deploy ESP32 OTA

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Show repo tree (debug)
      run: ls -R

    - name: Install Arduino CLI
      uses: arduino/setup-arduino-cli@v2

    - name: Install ESP32 core
      run: |
        arduino-cli config init
        arduino-cli core update-index
        arduino-cli core install esp32:esp32@3.0.7

    - name: Install Libraries
      run: |
        arduino-cli lib install "WiFiManager" "ArduinoJson" "ModbusMaster" "LoRa"

    # ดึง CURRENT_VERSION จาก Sender/Sender.ino
    - name: Extract firmware version
      id: ver
      run: |
        FILE="Sender/Sender.ino"
        [ ! -f "$FILE" ] && echo "File not found: $FILE" && ls -R && exit 1
        VER=$(grep -oP '#define\s+CURRENT_VERSION\s+"[^"]+"' "$FILE" | sed -E 's/.*"([^"]+)".*/\1/')
        [ -z "$VER" ] && echo "Version not found" && exit 1
        echo "version=$VER" >> $GITHUB_OUTPUT
        echo "Detected version: $VER"

    # ชี้เป็น "โฟลเดอร์" ได้เลย เมื่อชื่อไฟล์ = ชื่อโฟลเดอร์ (Sender/Sender.ino)
    - name: Compile firmware (folder mode)
      run: |
        set -x
        arduino-cli compile \
          --fqbn esp32:esp32:esp32 \
          Sender \
          --output-dir build

        - name: Prepare artifacts (firmware.bin & version.json)
      run: |
        BIN=$(find build -type f -name "*.bin" | head -n1)
        [ -z "$BIN" ] && echo "No .bin produced!" && exit 1
        cp "$BIN" firmware.bin
        cat > version.json <<EOF
        {
          "version": "${{ steps.ver.outputs.version }}",
          "url": "${{ secrets.OTA_URL }}"
        }
        EOF
        echo "version.json:" && cat version.json

    # ✅ เขียน SSH key จาก Secrets ลงไฟล์ชั่วคราว (รองรับหลายบรรทัด)
    - name: Write SSH private key
      run: |
        umask 077
        cat > key.pem <<'EOF'
        ${{ secrets.SSH_KEY }}
        EOF
        chmod 600 key.pem
        echo "SSH key written to key.pem"

    # ✅ ใช้ key_path แทน key (กันปัญหา multi-line secret)
    - name: Upload to VM via SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host:     ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key_path: key.pem
        source: |
          firmware.bin
          version.json
        target: /var/www/html/

