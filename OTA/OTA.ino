#include <WiFi.h>
#include <WiFiManager.h>   // ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏ô‡πâ‡∏≤ Config
#include <EEPROM.h>        // ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sensor ID ‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ñ‡∏≤‡∏ß‡∏£
#include <HTTPClient.h>    // ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô HTTP
#include <Update.h>        // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå OTA
#include <ArduinoJson.h>   // ‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON

// ---------------- CONFIG ----------------
#define EEPROM_SIZE 4                   // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà EEPROM (4 bytes)
const char* versionInfoUrl = "http://172.20.10.7/version.json"; // URL JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå OTA
#define CURRENT_VERSION "1.0.0"         // ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå
// -----------------------------------------

int NumberID = 1; // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Sensor ID (1‚Äì7)

// ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î ID ‡∏à‡∏≤‡∏Å EEPROM ----------
void loadID() {
  EEPROM.begin(EEPROM_SIZE);          // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EEPROM
  NumberID = EEPROM.read(0);          // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Byte 0
  if (NumberID < 1 || NumberID > 7) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 7)
    NumberID = 1;                     // ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1
  }
  EEPROM.end();                       // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EEPROM
}

// ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡πÑ‡∏õ EEPROM ----------
void saveID(int id) {
  EEPROM.begin(EEPROM_SIZE); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EEPROM
  EEPROM.write(0, id);       // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Byte 0
  EEPROM.commit();           // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  EEPROM.end();              // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EEPROM
}

// ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi + Config ID ----------
void connectWiFi() {
  WiFiManager wm; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå WiFiManager

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å EEPROM
  loadID();

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Config
  char idBuffer[3];
  snprintf(idBuffer, sizeof(idBuffer), "%d", NumberID);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å ID ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Config ‡∏Ç‡∏≠‡∏á WiFiManager
  WiFiManagerParameter custom_id("sensor_id", "Sensor ID (1-7)", idBuffer, 3);
  wm.addParameter(&custom_id);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Access Point (AP) ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô ESP_IDx (x = Sensor ID)
  String apName = "ESP_ID" + String(NumberID);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi (‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Config ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  bool res = wm.autoConnect(apName.c_str());

  if (!res) {
    Serial.println("‚ùå Failed to connect. Rebooting...");
    delay(3000);
    ESP.restart(); // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏£‡πå‡∏î
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å Sensor ID ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  int newID = atoi(custom_id.getValue());
  if (newID >= 1 && newID <= 7 && newID != NumberID) {
    saveID(newID);        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á EEPROM
    NumberID = newID;     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    Serial.println("üíæ Sensor ID saved to EEPROM.");
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  Serial.println("‚úÖ WiFi connected: " + WiFi.localIP().toString());
  Serial.println("‚≠ê Sensor ID = " + String(NumberID));
}

// ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTA ----------
void checkForOTAUpdate() {
  if (WiFi.status() != WL_CONNECTED) return; // ‡∏ñ‡πâ‡∏≤ WiFi ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î

  HTTPClient http;
  Serial.println("üîç Checking OTA...");

  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
  http.begin(versionInfoUrl);
  int httpCode = http.GET(); // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå

  if (httpCode == 200) { // ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    String payload = http.getString();
    Serial.println("üìÑ Version JSON: " + payload);

    DynamicJsonDocument doc(512);
    DeserializationError err = deserializeJson(doc, payload);

    if (err) {
      Serial.println("‚ùå JSON Parse failed");
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ key "version" ‡πÅ‡∏•‡∏∞ "url" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (doc.containsKey("version") && doc.containsKey("url")) {
      String latestVersion = doc["version"];
      String binUrl        = doc["url"];

      Serial.println("Latest Version: " + latestVersion);
      Serial.println("Current Version: " + String(CURRENT_VERSION));

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô JSON ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö CURRENT_VERSION ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ OTA
      if (latestVersion != CURRENT_VERSION) {
        Serial.println("‚¨ÜÔ∏è New version found! Starting OTA...");
        doOTA(binUrl);
      } else {
        Serial.println("‚úÖ Already up-to-date.");
      }
    } else {
      Serial.println("‚ö† JSON doesn't contain version/url keys.");
    }
  } else {
    Serial.println("‚ùå Version check failed. HTTP " + String(httpCode));
  }
  http.end();
}

// ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥ OTA Update ----------
void doOTA(const String& firmwareURL) {
  HTTPClient http;
  http.begin(firmwareURL);
  int httpCode = http.GET();

  if (httpCode == 200) { // ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå bin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    int contentLength = http.getSize();
    WiFiClient* stream = http.getStreamPtr();

    if (Update.begin(contentLength)) { // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTA
      size_t written = Update.writeStream(*stream);
      if (written == contentLength) { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
        Serial.println("‚úÖ Firmware written successfully.");
        if (Update.end()) {           // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          Serial.println("üîÅ Restarting...");
          ESP.restart();              // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏£‡πå‡∏î
        }
      } else {
        Serial.println("‚ùå Write failed: size mismatch.");
      }
    } else {
      Serial.println("‚ùå Not enough space for OTA.");
    }
  } else {
    Serial.println("‚ùå Failed to fetch firmware.bin. HTTP " + String(httpCode));
  }

  http.end();
}

void setup() {
  Serial.begin(115200);
  connectWiFi();        // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Sensor ID
  delay(1000);
  checkForOTAUpdate();  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ OTA ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
}

void loop() {
  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
}
